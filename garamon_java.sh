#!/bin/bash
# export PATH="/usr/share/jextract-22/bin:$PATH"

# root project path 
PROJECT_ROOT=$(dirname $(readlink -f $0))

GARAMON_LIB_PATH=$1
MVEC_HEADER=$2

GARAMON_LIB=$(basename $GARAMON_LIB_PATH)
GARAMON_LIB="${GARAMON_LIB#lib}"
GARAMON_LIB="${GARAMON_LIB%%.*}"


JAVA_SOURCES="build/generated"
JAVA_SOURCES_GARAMON="build/generated/org/garamon/$GARAMON_LIB"
JAVA_CLASSES="build/classes"
JAVA_DIST=build/dist
LIB_DIR=build/lib
TEMPLATE_DIR=$PROJECT_ROOT/templates


mkdir -p $JAVA_SOURCES
mkdir -p $JAVA_CLASSES
mkdir -p $JAVA_DIST
mkdir -p $LIB_DIR

cp $GARAMON_LIB_PATH $LIB_DIR

echo Running jextract for $GARAMON_LIB

rm -f $JAVA_SOURCES_GARAMON/Mvec_h.java
jextract -t org.garamon.$GARAMON_LIB  -l $GARAMON_LIB --use-system-load-library --output $JAVA_SOURCES $MVEC_HEADER


if ! ls -l $JAVA_SOURCES_GARAMON/Mvec_h.java ; then
    echo "Error: Not generated by jextract: $JAVA_SOURCES_GARAMON/Mvec_h.java"
fi

# clean destination directories
rm -fr $JAVA_GARAMON

# first stage preprocessing with simple sed

for src in $TEMPLATE_DIR/generator/*; do
    dst="$JAVA_SOURCES_GARAMON/$(basename $src)"
    cat $src | sed s/GENERIC/$GARAMON_LIB/g > $dst
done

# last stage preprocessing: create and run mini generator
java -Djava.library.path=$LIB_DIR --enable-native-access=ALL-UNNAMED $JAVA_SOURCES_GARAMON/GaramonParser.java -d $JAVA_SOURCES_GARAMON $TEMPLATE_DIR/*.java


# compile

javac -d $JAVA_CLASSES \
  $(find $JAVA_SOURCES_GARAMON -name "*.java") 


# test
# preprocess test template
java -Djava.library.path=$LIB_DIR --enable-native-access=ALL-UNNAMED $JAVA_SOURCES_GARAMON/GaramonParser.java -d $JAVA_DIST $TEMPLATE_DIR/sample/*.java
# run
java -Djava.library.path=$LIB_DIR -cp $JAVA_CLASSES --enable-native-access=ALL-UNNAMED $JAVA_DIST/Sample.java


