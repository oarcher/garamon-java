// Generated by jextract

package org.garamon.c5ga;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Mvec_h {

    Mvec_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/home/oarcher/Develop/garamon-java/build-algebra/src/main/resources/natives/linux-x86_64/libc5ga.so", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    /**
     * {@snippet lang=c :
     * typedef void *Mvec_C
     * }
     */
    public static final AddressLayout Mvec_C = Mvec_h.C_POINTER;

    private static class Mvec_new_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_new_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_empty()
     * }
     */
    public static FunctionDescriptor Mvec_new_empty$descriptor() {
        return Mvec_new_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_empty()
     * }
     */
    public static MethodHandle Mvec_new_empty$handle() {
        return Mvec_new_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_empty()
     * }
     */
    public static MemorySegment Mvec_new_empty$address() {
        return Mvec_new_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_new_empty()
     * }
     */
    public static MemorySegment Mvec_new_empty() {
        var mh$ = Mvec_new_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_new_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_new_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_new_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_copy(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_new_copy$descriptor() {
        return Mvec_new_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_copy(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_new_copy$handle() {
        return Mvec_new_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_copy(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_new_copy$address() {
        return Mvec_new_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_new_copy(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_new_copy(MemorySegment mv) {
        var mh$ = Mvec_new_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_new_copy", mv);
            }
            return (MemorySegment)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_new_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_new_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_scalar(double val)
     * }
     */
    public static FunctionDescriptor Mvec_new_scalar$descriptor() {
        return Mvec_new_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_scalar(double val)
     * }
     */
    public static MethodHandle Mvec_new_scalar$handle() {
        return Mvec_new_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_new_scalar(double val)
     * }
     */
    public static MemorySegment Mvec_new_scalar$address() {
        return Mvec_new_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_new_scalar(double val)
     * }
     */
    public static MemorySegment Mvec_new_scalar(double val) {
        var mh$ = Mvec_new_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_new_scalar", val);
            }
            return (MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_delete(Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_delete$descriptor() {
        return Mvec_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_delete(Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_delete$handle() {
        return Mvec_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_delete(Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_delete$address() {
        return Mvec_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_delete(Mvec_C mv)
     * }
     */
    public static void Mvec_delete(MemorySegment mv) {
        var mh$ = Mvec_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_delete", mv);
            }
            mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_assign_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_assign_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_assign_copy(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_assign_copy$descriptor() {
        return Mvec_assign_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_assign_copy(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_assign_copy$handle() {
        return Mvec_assign_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_assign_copy(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_assign_copy$address() {
        return Mvec_assign_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_assign_copy(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_assign_copy(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_assign_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_assign_copy", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_add$descriptor() {
        return Mvec_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_add$handle() {
        return Mvec_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_add$address() {
        return Mvec_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_add(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_add(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_add", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_add_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_add_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_add_scalar$descriptor() {
        return Mvec_add_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_add_scalar$handle() {
        return Mvec_add_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_add_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_add_scalar$address() {
        return Mvec_add_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_add_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_add_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_add_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_add_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_add_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_add_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_add_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_add_assign$descriptor() {
        return Mvec_add_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_add_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_add_assign$handle() {
        return Mvec_add_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_add_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_add_assign$address() {
        return Mvec_add_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_add_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_add_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_add_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_add_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_negate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_negate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_negate(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_negate$descriptor() {
        return Mvec_negate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_negate(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_negate$handle() {
        return Mvec_negate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_negate(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_negate$address() {
        return Mvec_negate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_negate(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_negate(MemorySegment mv) {
        var mh$ = Mvec_negate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_negate", mv);
            }
            return (MemorySegment)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_sub$descriptor() {
        return Mvec_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_sub$handle() {
        return Mvec_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_sub$address() {
        return Mvec_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_sub(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_sub(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_sub", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_sub_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_sub_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_sub_scalar$descriptor() {
        return Mvec_sub_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_sub_scalar$handle() {
        return Mvec_sub_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_sub_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_sub_scalar$address() {
        return Mvec_sub_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_sub_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_sub_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_sub_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_sub_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_sub_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_sub_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_sub_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_sub_assign$descriptor() {
        return Mvec_sub_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_sub_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_sub_assign$handle() {
        return Mvec_sub_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_sub_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_sub_assign$address() {
        return Mvec_sub_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_sub_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_sub_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_sub_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_sub_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_mul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_mul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_mul$descriptor() {
        return Mvec_mul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_mul$handle() {
        return Mvec_mul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_mul$address() {
        return Mvec_mul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_mul(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_mul(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_mul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_mul", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_mul_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_mul_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_mul_scalar$descriptor() {
        return Mvec_mul_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_mul_scalar$handle() {
        return Mvec_mul_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_mul_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_mul_scalar$address() {
        return Mvec_mul_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_mul_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_mul_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_mul_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_mul_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_mul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_mul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_mul(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_mul$descriptor() {
        return Mvec_scalar_mul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_mul(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_mul$handle() {
        return Mvec_scalar_mul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_mul(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_mul$address() {
        return Mvec_scalar_mul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_mul(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_mul(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_mul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_mul", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_mul_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_mul_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_mul_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_mul_assign$descriptor() {
        return Mvec_mul_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_mul_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_mul_assign$handle() {
        return Mvec_mul_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_mul_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_mul_assign$address() {
        return Mvec_mul_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_mul_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_mul_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_mul_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_mul_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_div$descriptor() {
        return Mvec_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_div$handle() {
        return Mvec_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_div$address() {
        return Mvec_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_div(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_div(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_div", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_div_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_div_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_div_scalar$descriptor() {
        return Mvec_div_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_div_scalar$handle() {
        return Mvec_div_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_div_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_div_scalar$address() {
        return Mvec_div_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_div_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_div_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_div_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_div_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_div(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_div$descriptor() {
        return Mvec_scalar_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_div(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_div$handle() {
        return Mvec_scalar_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_div(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_div$address() {
        return Mvec_scalar_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_div(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_div(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_div", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_div_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_div_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_div_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_div_assign$descriptor() {
        return Mvec_div_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_div_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_div_assign$handle() {
        return Mvec_div_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_div_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_div_assign$address() {
        return Mvec_div_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_div_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_div_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_div_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_div_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_div_assign_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_div_assign_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_div_assign_scalar(Mvec_C dest, double value)
     * }
     */
    public static FunctionDescriptor Mvec_div_assign_scalar$descriptor() {
        return Mvec_div_assign_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_div_assign_scalar(Mvec_C dest, double value)
     * }
     */
    public static MethodHandle Mvec_div_assign_scalar$handle() {
        return Mvec_div_assign_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_div_assign_scalar(Mvec_C dest, double value)
     * }
     */
    public static MemorySegment Mvec_div_assign_scalar$address() {
        return Mvec_div_assign_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_div_assign_scalar(Mvec_C dest, double value)
     * }
     */
    public static void Mvec_div_assign_scalar(MemorySegment dest, double value) {
        var mh$ = Mvec_div_assign_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_div_assign_scalar", dest, value);
            }
            mh$.invokeExact(dest, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_outer$descriptor() {
        return Mvec_outer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_outer$handle() {
        return Mvec_outer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer$address() {
        return Mvec_outer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_outer(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_outer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_outer_scalar$descriptor() {
        return Mvec_outer_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_outer_scalar$handle() {
        return Mvec_outer_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_outer_scalar$address() {
        return Mvec_outer_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_outer_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_outer_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_outer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_outer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_outer(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_outer$descriptor() {
        return Mvec_scalar_outer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_outer(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_outer$handle() {
        return Mvec_scalar_outer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_outer(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_outer$address() {
        return Mvec_scalar_outer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_outer(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_outer(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_outer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_outer", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_outer_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_outer_assign$descriptor() {
        return Mvec_outer_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_outer_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_outer_assign$handle() {
        return Mvec_outer_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_outer_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_outer_assign$address() {
        return Mvec_outer_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_outer_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_outer_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_outer_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_inner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_inner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_inner$descriptor() {
        return Mvec_inner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_inner$handle() {
        return Mvec_inner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_inner$address() {
        return Mvec_inner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_inner(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_inner(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_inner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_inner", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_inner_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_inner_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_inner_scalar$descriptor() {
        return Mvec_inner_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_inner_scalar$handle() {
        return Mvec_inner_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inner_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_inner_scalar$address() {
        return Mvec_inner_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_inner_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_inner_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_inner_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_inner_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_inner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_inner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_inner(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_inner$descriptor() {
        return Mvec_scalar_inner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_inner(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_inner$handle() {
        return Mvec_scalar_inner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_inner(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_inner$address() {
        return Mvec_scalar_inner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_inner(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_inner(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_inner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_inner", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_inner_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_inner_assign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_inner_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static FunctionDescriptor Mvec_inner_assign$descriptor() {
        return Mvec_inner_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_inner_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MethodHandle Mvec_inner_assign$handle() {
        return Mvec_inner_assign.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_inner_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static MemorySegment Mvec_inner_assign$address() {
        return Mvec_inner_assign.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_inner_assign(Mvec_C dest, const Mvec_C src)
     * }
     */
    public static void Mvec_inner_assign(MemorySegment dest, MemorySegment src) {
        var mh$ = Mvec_inner_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_inner_assign", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_right_contraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_right_contraction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_right_contraction$descriptor() {
        return Mvec_right_contraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_right_contraction$handle() {
        return Mvec_right_contraction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_right_contraction$address() {
        return Mvec_right_contraction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_right_contraction(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_right_contraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_right_contraction", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_right_contraction_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_right_contraction_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_right_contraction_scalar$descriptor() {
        return Mvec_right_contraction_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_right_contraction_scalar$handle() {
        return Mvec_right_contraction_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_right_contraction_scalar$address() {
        return Mvec_right_contraction_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_right_contraction_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_right_contraction_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_right_contraction_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_right_contraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_right_contraction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_right_contraction(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_right_contraction$descriptor() {
        return Mvec_scalar_right_contraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_right_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_right_contraction$handle() {
        return Mvec_scalar_right_contraction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_right_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_right_contraction$address() {
        return Mvec_scalar_right_contraction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_right_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_right_contraction(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_right_contraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_right_contraction", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_left_contraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_left_contraction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_left_contraction$descriptor() {
        return Mvec_left_contraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_left_contraction$handle() {
        return Mvec_left_contraction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_left_contraction$address() {
        return Mvec_left_contraction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_left_contraction(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_left_contraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_left_contraction", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_left_contraction_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_left_contraction_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static FunctionDescriptor Mvec_left_contraction_scalar$descriptor() {
        return Mvec_left_contraction_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MethodHandle Mvec_left_contraction_scalar$handle() {
        return Mvec_left_contraction_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_left_contraction_scalar$address() {
        return Mvec_left_contraction_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_scalar(const Mvec_C mv, double value)
     * }
     */
    public static MemorySegment Mvec_left_contraction_scalar(MemorySegment mv, double value) {
        var mh$ = Mvec_left_contraction_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_left_contraction_scalar", mv, value);
            }
            return (MemorySegment)mh$.invokeExact(mv, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_left_contraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_left_contraction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_left_contraction(double value, const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_left_contraction$descriptor() {
        return Mvec_scalar_left_contraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_left_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_scalar_left_contraction$handle() {
        return Mvec_scalar_left_contraction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_left_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_left_contraction$address() {
        return Mvec_scalar_left_contraction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_left_contraction(double value, const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_scalar_left_contraction(double value, MemorySegment mv) {
        var mh$ = Mvec_scalar_left_contraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_left_contraction", value, mv);
            }
            return (MemorySegment)mh$.invokeExact(value, mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_reverse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_reverse(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_reverse$descriptor() {
        return Mvec_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_reverse(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_reverse$handle() {
        return Mvec_reverse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_reverse(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_reverse$address() {
        return Mvec_reverse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_reverse(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_reverse(MemorySegment mv) {
        var mh$ = Mvec_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_reverse", mv);
            }
            return (MemorySegment)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_equals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_equals$descriptor() {
        return Mvec_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_equals$handle() {
        return Mvec_equals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_equals$address() {
        return Mvec_equals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static boolean Mvec_equals(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_equals", mv1, mv2);
            }
            return (boolean)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_inv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_inv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inv(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_inv$descriptor() {
        return Mvec_inv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inv(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_inv$handle() {
        return Mvec_inv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_inv(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_inv$address() {
        return Mvec_inv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_inv(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_inv(MemorySegment mv) {
        var mh$ = Mvec_inv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_inv", mv);
            }
            return (MemorySegment)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_not_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_not_equals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_not_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_not_equals$descriptor() {
        return Mvec_not_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_not_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_not_equals$handle() {
        return Mvec_not_equals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_not_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_not_equals$address() {
        return Mvec_not_equals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_not_equals(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static boolean Mvec_not_equals(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_not_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_not_equals", mv1, mv2);
            }
            return (boolean)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_to_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_to_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Mvec_to_scalar(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_to_scalar$descriptor() {
        return Mvec_to_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Mvec_to_scalar(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_to_scalar$handle() {
        return Mvec_to_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Mvec_to_scalar(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_to_scalar$address() {
        return Mvec_to_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Mvec_to_scalar(const Mvec_C mv)
     * }
     */
    public static double Mvec_to_scalar(MemorySegment mv) {
        var mh$ = Mvec_to_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_to_scalar", mv);
            }
            return (double)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_get_coeff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_get_coeff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Mvec_get_coeff(const Mvec_C mv, int idx)
     * }
     */
    public static FunctionDescriptor Mvec_get_coeff$descriptor() {
        return Mvec_get_coeff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Mvec_get_coeff(const Mvec_C mv, int idx)
     * }
     */
    public static MethodHandle Mvec_get_coeff$handle() {
        return Mvec_get_coeff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Mvec_get_coeff(const Mvec_C mv, int idx)
     * }
     */
    public static MemorySegment Mvec_get_coeff$address() {
        return Mvec_get_coeff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Mvec_get_coeff(const Mvec_C mv, int idx)
     * }
     */
    public static double Mvec_get_coeff(MemorySegment mv, int idx) {
        var mh$ = Mvec_get_coeff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_get_coeff", mv, idx);
            }
            return (double)mh$.invokeExact(mv, idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_set_coeff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_INT,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_set_coeff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_set_coeff(Mvec_C mv, int idx, double value)
     * }
     */
    public static FunctionDescriptor Mvec_set_coeff$descriptor() {
        return Mvec_set_coeff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_set_coeff(Mvec_C mv, int idx, double value)
     * }
     */
    public static MethodHandle Mvec_set_coeff$handle() {
        return Mvec_set_coeff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_set_coeff(Mvec_C mv, int idx, double value)
     * }
     */
    public static MemorySegment Mvec_set_coeff$address() {
        return Mvec_set_coeff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_set_coeff(Mvec_C mv, int idx, double value)
     * }
     */
    public static void Mvec_set_coeff(MemorySegment mv, int idx, double value) {
        var mh$ = Mvec_set_coeff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_set_coeff", mv, idx, value);
            }
            mh$.invokeExact(mv, idx, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_component_to_one {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_INT,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_component_to_one");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_component_to_one(unsigned int grade, int index)
     * }
     */
    public static FunctionDescriptor Mvec_component_to_one$descriptor() {
        return Mvec_component_to_one.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_component_to_one(unsigned int grade, int index)
     * }
     */
    public static MethodHandle Mvec_component_to_one$handle() {
        return Mvec_component_to_one.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_component_to_one(unsigned int grade, int index)
     * }
     */
    public static MemorySegment Mvec_component_to_one$address() {
        return Mvec_component_to_one.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_component_to_one(unsigned int grade, int index)
     * }
     */
    public static MemorySegment Mvec_component_to_one(int grade, int index) {
        var mh$ = Mvec_component_to_one.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_component_to_one", grade, index);
            }
            return (MemorySegment)mh$.invokeExact(grade, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Mvec_norm(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_norm$descriptor() {
        return Mvec_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Mvec_norm(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_norm$handle() {
        return Mvec_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Mvec_norm(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_norm$address() {
        return Mvec_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Mvec_norm(const Mvec_C mv)
     * }
     */
    public static double Mvec_norm(MemorySegment mv) {
        var mh$ = Mvec_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_norm", mv);
            }
            return (double)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_quadratic_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_DOUBLE,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_quadratic_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Mvec_quadratic_norm(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_quadratic_norm$descriptor() {
        return Mvec_quadratic_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Mvec_quadratic_norm(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_quadratic_norm$handle() {
        return Mvec_quadratic_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Mvec_quadratic_norm(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_quadratic_norm$address() {
        return Mvec_quadratic_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Mvec_quadratic_norm(const Mvec_C mv)
     * }
     */
    public static double Mvec_quadratic_norm(MemorySegment mv) {
        var mh$ = Mvec_quadratic_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_quadratic_norm", mv);
            }
            return (double)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_get_highest_grade {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_INT,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_get_highest_grade");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Mvec_get_highest_grade(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_get_highest_grade$descriptor() {
        return Mvec_get_highest_grade.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Mvec_get_highest_grade(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_get_highest_grade$handle() {
        return Mvec_get_highest_grade.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Mvec_get_highest_grade(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_get_highest_grade$address() {
        return Mvec_get_highest_grade.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Mvec_get_highest_grade(const Mvec_C mv)
     * }
     */
    public static int Mvec_get_highest_grade(MemorySegment mv) {
        var mh$ = Mvec_get_highest_grade.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_get_highest_grade", mv);
            }
            return (int)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_get_grades_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_INT,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_get_grades_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int Mvec_get_grades_count(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_get_grades_count$descriptor() {
        return Mvec_get_grades_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int Mvec_get_grades_count(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_get_grades_count$handle() {
        return Mvec_get_grades_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int Mvec_get_grades_count(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_get_grades_count$address() {
        return Mvec_get_grades_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int Mvec_get_grades_count(const Mvec_C mv)
     * }
     */
    public static int Mvec_get_grades_count(MemorySegment mv) {
        var mh$ = Mvec_get_grades_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_get_grades_count", mv);
            }
            return (int)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_copy_grades {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_INT,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_copy_grades");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Mvec_copy_grades(Mvec_C mv, unsigned int *out, int cap)
     * }
     */
    public static FunctionDescriptor Mvec_copy_grades$descriptor() {
        return Mvec_copy_grades.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Mvec_copy_grades(Mvec_C mv, unsigned int *out, int cap)
     * }
     */
    public static MethodHandle Mvec_copy_grades$handle() {
        return Mvec_copy_grades.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Mvec_copy_grades(Mvec_C mv, unsigned int *out, int cap)
     * }
     */
    public static MemorySegment Mvec_copy_grades$address() {
        return Mvec_copy_grades.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Mvec_copy_grades(Mvec_C mv, unsigned int *out, int cap)
     * }
     */
    public static int Mvec_copy_grades(MemorySegment mv, MemorySegment out, int cap) {
        var mh$ = Mvec_copy_grades.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_copy_grades", mv, out, cap);
            }
            return (int)mh$.invokeExact(mv, out, cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_get_grade_component {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_get_grade_component");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_get_grade_component(const Mvec_C mv, int grade)
     * }
     */
    public static FunctionDescriptor Mvec_get_grade_component$descriptor() {
        return Mvec_get_grade_component.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_get_grade_component(const Mvec_C mv, int grade)
     * }
     */
    public static MethodHandle Mvec_get_grade_component$handle() {
        return Mvec_get_grade_component.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_get_grade_component(const Mvec_C mv, int grade)
     * }
     */
    public static MemorySegment Mvec_get_grade_component$address() {
        return Mvec_get_grade_component.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_get_grade_component(const Mvec_C mv, int grade)
     * }
     */
    public static MemorySegment Mvec_get_grade_component(MemorySegment mv, int grade) {
        var mh$ = Mvec_get_grade_component.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_get_grade_component", mv, grade);
            }
            return (MemorySegment)mh$.invokeExact(mv, grade);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_is_grade {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_is_grade");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_is_grade(const Mvec_C mv, unsigned int grade)
     * }
     */
    public static FunctionDescriptor Mvec_is_grade$descriptor() {
        return Mvec_is_grade.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_is_grade(const Mvec_C mv, unsigned int grade)
     * }
     */
    public static MethodHandle Mvec_is_grade$handle() {
        return Mvec_is_grade.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_is_grade(const Mvec_C mv, unsigned int grade)
     * }
     */
    public static MemorySegment Mvec_is_grade$address() {
        return Mvec_is_grade.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_is_grade(const Mvec_C mv, unsigned int grade)
     * }
     */
    public static boolean Mvec_is_grade(MemorySegment mv, int grade) {
        var mh$ = Mvec_is_grade.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_is_grade", mv, grade);
            }
            return (boolean)mh$.invokeExact(mv, grade);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_clear(Mvec_C mv, int grade)
     * }
     */
    public static FunctionDescriptor Mvec_clear$descriptor() {
        return Mvec_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_clear(Mvec_C mv, int grade)
     * }
     */
    public static MethodHandle Mvec_clear$handle() {
        return Mvec_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_clear(Mvec_C mv, int grade)
     * }
     */
    public static MemorySegment Mvec_clear$address() {
        return Mvec_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_clear(Mvec_C mv, int grade)
     * }
     */
    public static void Mvec_clear(MemorySegment mv, int grade) {
        var mh$ = Mvec_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_clear", mv, grade);
            }
            mh$.invokeExact(mv, grade);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_is_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_is_empty(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_is_empty$descriptor() {
        return Mvec_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_is_empty(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_is_empty$handle() {
        return Mvec_is_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_is_empty(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_is_empty$address() {
        return Mvec_is_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_is_empty(const Mvec_C mv)
     * }
     */
    public static boolean Mvec_is_empty(MemorySegment mv) {
        var mh$ = Mvec_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_is_empty", mv);
            }
            return (boolean)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_is_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_is_homogeneous");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_is_homogeneous(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_is_homogeneous$descriptor() {
        return Mvec_is_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_is_homogeneous(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_is_homogeneous$handle() {
        return Mvec_is_homogeneous.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_is_homogeneous(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_is_homogeneous$address() {
        return Mvec_is_homogeneous.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_is_homogeneous(const Mvec_C mv)
     * }
     */
    public static boolean Mvec_is_homogeneous(MemorySegment mv) {
        var mh$ = Mvec_is_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_is_homogeneous", mv);
            }
            return (boolean)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_round_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER,
            Mvec_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_round_zero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_round_zero(Mvec_C mv, double epsilon)
     * }
     */
    public static FunctionDescriptor Mvec_round_zero$descriptor() {
        return Mvec_round_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_round_zero(Mvec_C mv, double epsilon)
     * }
     */
    public static MethodHandle Mvec_round_zero$handle() {
        return Mvec_round_zero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_round_zero(Mvec_C mv, double epsilon)
     * }
     */
    public static MemorySegment Mvec_round_zero$address() {
        return Mvec_round_zero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_round_zero(Mvec_C mv, double epsilon)
     * }
     */
    public static void Mvec_round_zero(MemorySegment mv, double epsilon) {
        var mh$ = Mvec_round_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_round_zero", mv, epsilon);
            }
            mh$.invokeExact(mv, epsilon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_same_grade {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_BOOL,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_same_grade");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _Bool Mvec_same_grade(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_same_grade$descriptor() {
        return Mvec_same_grade.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _Bool Mvec_same_grade(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_same_grade$handle() {
        return Mvec_same_grade.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _Bool Mvec_same_grade(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_same_grade$address() {
        return Mvec_same_grade.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _Bool Mvec_same_grade(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static boolean Mvec_same_grade(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_same_grade.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_same_grade", mv1, mv2);
            }
            return (boolean)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_display");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Mvec_display(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_display$descriptor() {
        return Mvec_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Mvec_display(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_display$handle() {
        return Mvec_display.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Mvec_display(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_display$address() {
        return Mvec_display.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Mvec_display(const Mvec_C mv)
     * }
     */
    public static void Mvec_display(MemorySegment mv) {
        var mh$ = Mvec_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_display", mv);
            }
            mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_extract_one_component {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_INT,
            Mvec_h.C_INT,
            Mvec_h.C_INT
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_extract_one_component");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_extract_one_component(const Mvec_C mv, int grade, int sizeOfKVector, int indexInKvector)
     * }
     */
    public static FunctionDescriptor Mvec_extract_one_component$descriptor() {
        return Mvec_extract_one_component.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_extract_one_component(const Mvec_C mv, int grade, int sizeOfKVector, int indexInKvector)
     * }
     */
    public static MethodHandle Mvec_extract_one_component$handle() {
        return Mvec_extract_one_component.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_extract_one_component(const Mvec_C mv, int grade, int sizeOfKVector, int indexInKvector)
     * }
     */
    public static MemorySegment Mvec_extract_one_component$address() {
        return Mvec_extract_one_component.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_extract_one_component(const Mvec_C mv, int grade, int sizeOfKVector, int indexInKvector)
     * }
     */
    public static MemorySegment Mvec_extract_one_component(MemorySegment mv, int grade, int sizeOfKVector, int indexInKvector) {
        var mh$ = Mvec_extract_one_component.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_extract_one_component", mv, grade, sizeOfKVector, indexInKvector);
            }
            return (MemorySegment)mh$.invokeExact(mv, grade, sizeOfKVector, indexInKvector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0()
     * }
     */
    public static FunctionDescriptor Mvec_e0$descriptor() {
        return Mvec_e0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0()
     * }
     */
    public static MethodHandle Mvec_e0$handle() {
        return Mvec_e0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0()
     * }
     */
    public static MemorySegment Mvec_e0$address() {
        return Mvec_e0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0()
     * }
     */
    public static MemorySegment Mvec_e0() {
        var mh$ = Mvec_e0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1()
     * }
     */
    public static FunctionDescriptor Mvec_e1$descriptor() {
        return Mvec_e1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1()
     * }
     */
    public static MethodHandle Mvec_e1$handle() {
        return Mvec_e1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1()
     * }
     */
    public static MemorySegment Mvec_e1$address() {
        return Mvec_e1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1()
     * }
     */
    public static MemorySegment Mvec_e1() {
        var mh$ = Mvec_e1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2()
     * }
     */
    public static FunctionDescriptor Mvec_e2$descriptor() {
        return Mvec_e2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2()
     * }
     */
    public static MethodHandle Mvec_e2$handle() {
        return Mvec_e2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2()
     * }
     */
    public static MemorySegment Mvec_e2$address() {
        return Mvec_e2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e2()
     * }
     */
    public static MemorySegment Mvec_e2() {
        var mh$ = Mvec_e2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e2");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3()
     * }
     */
    public static FunctionDescriptor Mvec_e3$descriptor() {
        return Mvec_e3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3()
     * }
     */
    public static MethodHandle Mvec_e3$handle() {
        return Mvec_e3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3()
     * }
     */
    public static MemorySegment Mvec_e3$address() {
        return Mvec_e3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e3()
     * }
     */
    public static MemorySegment Mvec_e3() {
        var mh$ = Mvec_e3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e3");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4()
     * }
     */
    public static FunctionDescriptor Mvec_e4$descriptor() {
        return Mvec_e4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4()
     * }
     */
    public static MethodHandle Mvec_e4$handle() {
        return Mvec_e4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4()
     * }
     */
    public static MemorySegment Mvec_e4$address() {
        return Mvec_e4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e4()
     * }
     */
    public static MemorySegment Mvec_e4() {
        var mh$ = Mvec_e4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e4");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e5 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e5");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5()
     * }
     */
    public static FunctionDescriptor Mvec_e5$descriptor() {
        return Mvec_e5.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5()
     * }
     */
    public static MethodHandle Mvec_e5$handle() {
        return Mvec_e5.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5()
     * }
     */
    public static MemorySegment Mvec_e5$address() {
        return Mvec_e5.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e5()
     * }
     */
    public static MemorySegment Mvec_e5() {
        var mh$ = Mvec_e5.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e5");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_ei {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_ei");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_ei()
     * }
     */
    public static FunctionDescriptor Mvec_ei$descriptor() {
        return Mvec_ei.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_ei()
     * }
     */
    public static MethodHandle Mvec_ei$handle() {
        return Mvec_ei.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_ei()
     * }
     */
    public static MemorySegment Mvec_ei$address() {
        return Mvec_ei.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_ei()
     * }
     */
    public static MemorySegment Mvec_ei() {
        var mh$ = Mvec_ei.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_ei");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01()
     * }
     */
    public static FunctionDescriptor Mvec_e01$descriptor() {
        return Mvec_e01.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01()
     * }
     */
    public static MethodHandle Mvec_e01$handle() {
        return Mvec_e01.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01()
     * }
     */
    public static MemorySegment Mvec_e01$address() {
        return Mvec_e01.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01()
     * }
     */
    public static MemorySegment Mvec_e01() {
        var mh$ = Mvec_e01.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e02 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e02");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02()
     * }
     */
    public static FunctionDescriptor Mvec_e02$descriptor() {
        return Mvec_e02.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02()
     * }
     */
    public static MethodHandle Mvec_e02$handle() {
        return Mvec_e02.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02()
     * }
     */
    public static MemorySegment Mvec_e02$address() {
        return Mvec_e02.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e02()
     * }
     */
    public static MemorySegment Mvec_e02() {
        var mh$ = Mvec_e02.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e02");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e03 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e03");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03()
     * }
     */
    public static FunctionDescriptor Mvec_e03$descriptor() {
        return Mvec_e03.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03()
     * }
     */
    public static MethodHandle Mvec_e03$handle() {
        return Mvec_e03.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03()
     * }
     */
    public static MemorySegment Mvec_e03$address() {
        return Mvec_e03.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e03()
     * }
     */
    public static MemorySegment Mvec_e03() {
        var mh$ = Mvec_e03.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e03");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e04 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e04");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04()
     * }
     */
    public static FunctionDescriptor Mvec_e04$descriptor() {
        return Mvec_e04.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04()
     * }
     */
    public static MethodHandle Mvec_e04$handle() {
        return Mvec_e04.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04()
     * }
     */
    public static MemorySegment Mvec_e04$address() {
        return Mvec_e04.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e04()
     * }
     */
    public static MemorySegment Mvec_e04() {
        var mh$ = Mvec_e04.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e04");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e05 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e05");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05()
     * }
     */
    public static FunctionDescriptor Mvec_e05$descriptor() {
        return Mvec_e05.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05()
     * }
     */
    public static MethodHandle Mvec_e05$handle() {
        return Mvec_e05.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05()
     * }
     */
    public static MemorySegment Mvec_e05$address() {
        return Mvec_e05.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e05()
     * }
     */
    public static MemorySegment Mvec_e05() {
        var mh$ = Mvec_e05.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e05");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0i()
     * }
     */
    public static FunctionDescriptor Mvec_e0i$descriptor() {
        return Mvec_e0i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0i()
     * }
     */
    public static MethodHandle Mvec_e0i$handle() {
        return Mvec_e0i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0i()
     * }
     */
    public static MemorySegment Mvec_e0i$address() {
        return Mvec_e0i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0i()
     * }
     */
    public static MemorySegment Mvec_e0i() {
        var mh$ = Mvec_e0i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e12");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12()
     * }
     */
    public static FunctionDescriptor Mvec_e12$descriptor() {
        return Mvec_e12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12()
     * }
     */
    public static MethodHandle Mvec_e12$handle() {
        return Mvec_e12.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12()
     * }
     */
    public static MemorySegment Mvec_e12$address() {
        return Mvec_e12.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e12()
     * }
     */
    public static MemorySegment Mvec_e12() {
        var mh$ = Mvec_e12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e12");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e13 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e13");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13()
     * }
     */
    public static FunctionDescriptor Mvec_e13$descriptor() {
        return Mvec_e13.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13()
     * }
     */
    public static MethodHandle Mvec_e13$handle() {
        return Mvec_e13.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13()
     * }
     */
    public static MemorySegment Mvec_e13$address() {
        return Mvec_e13.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e13()
     * }
     */
    public static MemorySegment Mvec_e13() {
        var mh$ = Mvec_e13.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e13");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e14 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e14");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14()
     * }
     */
    public static FunctionDescriptor Mvec_e14$descriptor() {
        return Mvec_e14.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14()
     * }
     */
    public static MethodHandle Mvec_e14$handle() {
        return Mvec_e14.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14()
     * }
     */
    public static MemorySegment Mvec_e14$address() {
        return Mvec_e14.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e14()
     * }
     */
    public static MemorySegment Mvec_e14() {
        var mh$ = Mvec_e14.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e14");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e15 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e15");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15()
     * }
     */
    public static FunctionDescriptor Mvec_e15$descriptor() {
        return Mvec_e15.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15()
     * }
     */
    public static MethodHandle Mvec_e15$handle() {
        return Mvec_e15.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15()
     * }
     */
    public static MemorySegment Mvec_e15$address() {
        return Mvec_e15.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e15()
     * }
     */
    public static MemorySegment Mvec_e15() {
        var mh$ = Mvec_e15.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e15");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1i()
     * }
     */
    public static FunctionDescriptor Mvec_e1i$descriptor() {
        return Mvec_e1i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1i()
     * }
     */
    public static MethodHandle Mvec_e1i$handle() {
        return Mvec_e1i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1i()
     * }
     */
    public static MemorySegment Mvec_e1i$address() {
        return Mvec_e1i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1i()
     * }
     */
    public static MemorySegment Mvec_e1i() {
        var mh$ = Mvec_e1i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e23 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e23");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23()
     * }
     */
    public static FunctionDescriptor Mvec_e23$descriptor() {
        return Mvec_e23.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23()
     * }
     */
    public static MethodHandle Mvec_e23$handle() {
        return Mvec_e23.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23()
     * }
     */
    public static MemorySegment Mvec_e23$address() {
        return Mvec_e23.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e23()
     * }
     */
    public static MemorySegment Mvec_e23() {
        var mh$ = Mvec_e23.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e23");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e24 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e24");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24()
     * }
     */
    public static FunctionDescriptor Mvec_e24$descriptor() {
        return Mvec_e24.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24()
     * }
     */
    public static MethodHandle Mvec_e24$handle() {
        return Mvec_e24.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24()
     * }
     */
    public static MemorySegment Mvec_e24$address() {
        return Mvec_e24.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e24()
     * }
     */
    public static MemorySegment Mvec_e24() {
        var mh$ = Mvec_e24.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e24");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e25 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e25");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25()
     * }
     */
    public static FunctionDescriptor Mvec_e25$descriptor() {
        return Mvec_e25.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25()
     * }
     */
    public static MethodHandle Mvec_e25$handle() {
        return Mvec_e25.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25()
     * }
     */
    public static MemorySegment Mvec_e25$address() {
        return Mvec_e25.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e25()
     * }
     */
    public static MemorySegment Mvec_e25() {
        var mh$ = Mvec_e25.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e25");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2i()
     * }
     */
    public static FunctionDescriptor Mvec_e2i$descriptor() {
        return Mvec_e2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2i()
     * }
     */
    public static MethodHandle Mvec_e2i$handle() {
        return Mvec_e2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2i()
     * }
     */
    public static MemorySegment Mvec_e2i$address() {
        return Mvec_e2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e2i()
     * }
     */
    public static MemorySegment Mvec_e2i() {
        var mh$ = Mvec_e2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e2i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e34 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e34");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34()
     * }
     */
    public static FunctionDescriptor Mvec_e34$descriptor() {
        return Mvec_e34.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34()
     * }
     */
    public static MethodHandle Mvec_e34$handle() {
        return Mvec_e34.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34()
     * }
     */
    public static MemorySegment Mvec_e34$address() {
        return Mvec_e34.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e34()
     * }
     */
    public static MemorySegment Mvec_e34() {
        var mh$ = Mvec_e34.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e34");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e35 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e35");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35()
     * }
     */
    public static FunctionDescriptor Mvec_e35$descriptor() {
        return Mvec_e35.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35()
     * }
     */
    public static MethodHandle Mvec_e35$handle() {
        return Mvec_e35.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35()
     * }
     */
    public static MemorySegment Mvec_e35$address() {
        return Mvec_e35.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e35()
     * }
     */
    public static MemorySegment Mvec_e35() {
        var mh$ = Mvec_e35.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e35");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3i()
     * }
     */
    public static FunctionDescriptor Mvec_e3i$descriptor() {
        return Mvec_e3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3i()
     * }
     */
    public static MethodHandle Mvec_e3i$handle() {
        return Mvec_e3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e3i()
     * }
     */
    public static MemorySegment Mvec_e3i$address() {
        return Mvec_e3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e3i()
     * }
     */
    public static MemorySegment Mvec_e3i() {
        var mh$ = Mvec_e3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e3i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e45 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e45");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45()
     * }
     */
    public static FunctionDescriptor Mvec_e45$descriptor() {
        return Mvec_e45.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45()
     * }
     */
    public static MethodHandle Mvec_e45$handle() {
        return Mvec_e45.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45()
     * }
     */
    public static MemorySegment Mvec_e45$address() {
        return Mvec_e45.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e45()
     * }
     */
    public static MemorySegment Mvec_e45() {
        var mh$ = Mvec_e45.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e45");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4i()
     * }
     */
    public static FunctionDescriptor Mvec_e4i$descriptor() {
        return Mvec_e4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4i()
     * }
     */
    public static MethodHandle Mvec_e4i$handle() {
        return Mvec_e4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e4i()
     * }
     */
    public static MemorySegment Mvec_e4i$address() {
        return Mvec_e4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e4i()
     * }
     */
    public static MemorySegment Mvec_e4i() {
        var mh$ = Mvec_e4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e4i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e5i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e5i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5i()
     * }
     */
    public static FunctionDescriptor Mvec_e5i$descriptor() {
        return Mvec_e5i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5i()
     * }
     */
    public static MethodHandle Mvec_e5i$handle() {
        return Mvec_e5i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e5i()
     * }
     */
    public static MemorySegment Mvec_e5i$address() {
        return Mvec_e5i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e5i()
     * }
     */
    public static MemorySegment Mvec_e5i() {
        var mh$ = Mvec_e5i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e5i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e012 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e012");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012()
     * }
     */
    public static FunctionDescriptor Mvec_e012$descriptor() {
        return Mvec_e012.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012()
     * }
     */
    public static MethodHandle Mvec_e012$handle() {
        return Mvec_e012.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012()
     * }
     */
    public static MemorySegment Mvec_e012$address() {
        return Mvec_e012.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e012()
     * }
     */
    public static MemorySegment Mvec_e012() {
        var mh$ = Mvec_e012.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e012");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e013 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e013");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013()
     * }
     */
    public static FunctionDescriptor Mvec_e013$descriptor() {
        return Mvec_e013.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013()
     * }
     */
    public static MethodHandle Mvec_e013$handle() {
        return Mvec_e013.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013()
     * }
     */
    public static MemorySegment Mvec_e013$address() {
        return Mvec_e013.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e013()
     * }
     */
    public static MemorySegment Mvec_e013() {
        var mh$ = Mvec_e013.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e013");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e014 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e014");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014()
     * }
     */
    public static FunctionDescriptor Mvec_e014$descriptor() {
        return Mvec_e014.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014()
     * }
     */
    public static MethodHandle Mvec_e014$handle() {
        return Mvec_e014.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014()
     * }
     */
    public static MemorySegment Mvec_e014$address() {
        return Mvec_e014.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e014()
     * }
     */
    public static MemorySegment Mvec_e014() {
        var mh$ = Mvec_e014.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e014");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e015 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e015");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015()
     * }
     */
    public static FunctionDescriptor Mvec_e015$descriptor() {
        return Mvec_e015.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015()
     * }
     */
    public static MethodHandle Mvec_e015$handle() {
        return Mvec_e015.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015()
     * }
     */
    public static MemorySegment Mvec_e015$address() {
        return Mvec_e015.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e015()
     * }
     */
    public static MemorySegment Mvec_e015() {
        var mh$ = Mvec_e015.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e015");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01i()
     * }
     */
    public static FunctionDescriptor Mvec_e01i$descriptor() {
        return Mvec_e01i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01i()
     * }
     */
    public static MethodHandle Mvec_e01i$handle() {
        return Mvec_e01i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01i()
     * }
     */
    public static MemorySegment Mvec_e01i$address() {
        return Mvec_e01i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01i()
     * }
     */
    public static MemorySegment Mvec_e01i() {
        var mh$ = Mvec_e01i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e023 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e023");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023()
     * }
     */
    public static FunctionDescriptor Mvec_e023$descriptor() {
        return Mvec_e023.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023()
     * }
     */
    public static MethodHandle Mvec_e023$handle() {
        return Mvec_e023.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023()
     * }
     */
    public static MemorySegment Mvec_e023$address() {
        return Mvec_e023.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e023()
     * }
     */
    public static MemorySegment Mvec_e023() {
        var mh$ = Mvec_e023.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e023");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e024 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e024");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024()
     * }
     */
    public static FunctionDescriptor Mvec_e024$descriptor() {
        return Mvec_e024.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024()
     * }
     */
    public static MethodHandle Mvec_e024$handle() {
        return Mvec_e024.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024()
     * }
     */
    public static MemorySegment Mvec_e024$address() {
        return Mvec_e024.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e024()
     * }
     */
    public static MemorySegment Mvec_e024() {
        var mh$ = Mvec_e024.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e024");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e025 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e025");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025()
     * }
     */
    public static FunctionDescriptor Mvec_e025$descriptor() {
        return Mvec_e025.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025()
     * }
     */
    public static MethodHandle Mvec_e025$handle() {
        return Mvec_e025.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025()
     * }
     */
    public static MemorySegment Mvec_e025$address() {
        return Mvec_e025.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e025()
     * }
     */
    public static MemorySegment Mvec_e025() {
        var mh$ = Mvec_e025.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e025");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e02i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e02i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02i()
     * }
     */
    public static FunctionDescriptor Mvec_e02i$descriptor() {
        return Mvec_e02i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02i()
     * }
     */
    public static MethodHandle Mvec_e02i$handle() {
        return Mvec_e02i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02i()
     * }
     */
    public static MemorySegment Mvec_e02i$address() {
        return Mvec_e02i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e02i()
     * }
     */
    public static MemorySegment Mvec_e02i() {
        var mh$ = Mvec_e02i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e02i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e034 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e034");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034()
     * }
     */
    public static FunctionDescriptor Mvec_e034$descriptor() {
        return Mvec_e034.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034()
     * }
     */
    public static MethodHandle Mvec_e034$handle() {
        return Mvec_e034.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034()
     * }
     */
    public static MemorySegment Mvec_e034$address() {
        return Mvec_e034.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e034()
     * }
     */
    public static MemorySegment Mvec_e034() {
        var mh$ = Mvec_e034.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e034");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e035 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e035");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035()
     * }
     */
    public static FunctionDescriptor Mvec_e035$descriptor() {
        return Mvec_e035.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035()
     * }
     */
    public static MethodHandle Mvec_e035$handle() {
        return Mvec_e035.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035()
     * }
     */
    public static MemorySegment Mvec_e035$address() {
        return Mvec_e035.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e035()
     * }
     */
    public static MemorySegment Mvec_e035() {
        var mh$ = Mvec_e035.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e035");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e03i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e03i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03i()
     * }
     */
    public static FunctionDescriptor Mvec_e03i$descriptor() {
        return Mvec_e03i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03i()
     * }
     */
    public static MethodHandle Mvec_e03i$handle() {
        return Mvec_e03i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e03i()
     * }
     */
    public static MemorySegment Mvec_e03i$address() {
        return Mvec_e03i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e03i()
     * }
     */
    public static MemorySegment Mvec_e03i() {
        var mh$ = Mvec_e03i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e03i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e045 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e045");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045()
     * }
     */
    public static FunctionDescriptor Mvec_e045$descriptor() {
        return Mvec_e045.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045()
     * }
     */
    public static MethodHandle Mvec_e045$handle() {
        return Mvec_e045.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045()
     * }
     */
    public static MemorySegment Mvec_e045$address() {
        return Mvec_e045.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e045()
     * }
     */
    public static MemorySegment Mvec_e045() {
        var mh$ = Mvec_e045.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e045");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e04i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e04i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04i()
     * }
     */
    public static FunctionDescriptor Mvec_e04i$descriptor() {
        return Mvec_e04i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04i()
     * }
     */
    public static MethodHandle Mvec_e04i$handle() {
        return Mvec_e04i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e04i()
     * }
     */
    public static MemorySegment Mvec_e04i$address() {
        return Mvec_e04i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e04i()
     * }
     */
    public static MemorySegment Mvec_e04i() {
        var mh$ = Mvec_e04i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e04i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e05i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e05i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05i()
     * }
     */
    public static FunctionDescriptor Mvec_e05i$descriptor() {
        return Mvec_e05i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05i()
     * }
     */
    public static MethodHandle Mvec_e05i$handle() {
        return Mvec_e05i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e05i()
     * }
     */
    public static MemorySegment Mvec_e05i$address() {
        return Mvec_e05i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e05i()
     * }
     */
    public static MemorySegment Mvec_e05i() {
        var mh$ = Mvec_e05i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e05i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e123 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e123");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123()
     * }
     */
    public static FunctionDescriptor Mvec_e123$descriptor() {
        return Mvec_e123.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123()
     * }
     */
    public static MethodHandle Mvec_e123$handle() {
        return Mvec_e123.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123()
     * }
     */
    public static MemorySegment Mvec_e123$address() {
        return Mvec_e123.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e123()
     * }
     */
    public static MemorySegment Mvec_e123() {
        var mh$ = Mvec_e123.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e123");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e124 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e124");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124()
     * }
     */
    public static FunctionDescriptor Mvec_e124$descriptor() {
        return Mvec_e124.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124()
     * }
     */
    public static MethodHandle Mvec_e124$handle() {
        return Mvec_e124.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124()
     * }
     */
    public static MemorySegment Mvec_e124$address() {
        return Mvec_e124.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e124()
     * }
     */
    public static MemorySegment Mvec_e124() {
        var mh$ = Mvec_e124.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e124");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e125 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e125");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125()
     * }
     */
    public static FunctionDescriptor Mvec_e125$descriptor() {
        return Mvec_e125.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125()
     * }
     */
    public static MethodHandle Mvec_e125$handle() {
        return Mvec_e125.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125()
     * }
     */
    public static MemorySegment Mvec_e125$address() {
        return Mvec_e125.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e125()
     * }
     */
    public static MemorySegment Mvec_e125() {
        var mh$ = Mvec_e125.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e125");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e12i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e12i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12i()
     * }
     */
    public static FunctionDescriptor Mvec_e12i$descriptor() {
        return Mvec_e12i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12i()
     * }
     */
    public static MethodHandle Mvec_e12i$handle() {
        return Mvec_e12i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12i()
     * }
     */
    public static MemorySegment Mvec_e12i$address() {
        return Mvec_e12i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e12i()
     * }
     */
    public static MemorySegment Mvec_e12i() {
        var mh$ = Mvec_e12i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e12i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e134 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e134");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134()
     * }
     */
    public static FunctionDescriptor Mvec_e134$descriptor() {
        return Mvec_e134.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134()
     * }
     */
    public static MethodHandle Mvec_e134$handle() {
        return Mvec_e134.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134()
     * }
     */
    public static MemorySegment Mvec_e134$address() {
        return Mvec_e134.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e134()
     * }
     */
    public static MemorySegment Mvec_e134() {
        var mh$ = Mvec_e134.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e134");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e135 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e135");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135()
     * }
     */
    public static FunctionDescriptor Mvec_e135$descriptor() {
        return Mvec_e135.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135()
     * }
     */
    public static MethodHandle Mvec_e135$handle() {
        return Mvec_e135.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135()
     * }
     */
    public static MemorySegment Mvec_e135$address() {
        return Mvec_e135.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e135()
     * }
     */
    public static MemorySegment Mvec_e135() {
        var mh$ = Mvec_e135.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e135");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e13i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e13i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13i()
     * }
     */
    public static FunctionDescriptor Mvec_e13i$descriptor() {
        return Mvec_e13i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13i()
     * }
     */
    public static MethodHandle Mvec_e13i$handle() {
        return Mvec_e13i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e13i()
     * }
     */
    public static MemorySegment Mvec_e13i$address() {
        return Mvec_e13i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e13i()
     * }
     */
    public static MemorySegment Mvec_e13i() {
        var mh$ = Mvec_e13i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e13i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e145 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e145");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145()
     * }
     */
    public static FunctionDescriptor Mvec_e145$descriptor() {
        return Mvec_e145.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145()
     * }
     */
    public static MethodHandle Mvec_e145$handle() {
        return Mvec_e145.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145()
     * }
     */
    public static MemorySegment Mvec_e145$address() {
        return Mvec_e145.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e145()
     * }
     */
    public static MemorySegment Mvec_e145() {
        var mh$ = Mvec_e145.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e145");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e14i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e14i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14i()
     * }
     */
    public static FunctionDescriptor Mvec_e14i$descriptor() {
        return Mvec_e14i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14i()
     * }
     */
    public static MethodHandle Mvec_e14i$handle() {
        return Mvec_e14i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e14i()
     * }
     */
    public static MemorySegment Mvec_e14i$address() {
        return Mvec_e14i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e14i()
     * }
     */
    public static MemorySegment Mvec_e14i() {
        var mh$ = Mvec_e14i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e14i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e15i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e15i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15i()
     * }
     */
    public static FunctionDescriptor Mvec_e15i$descriptor() {
        return Mvec_e15i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15i()
     * }
     */
    public static MethodHandle Mvec_e15i$handle() {
        return Mvec_e15i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e15i()
     * }
     */
    public static MemorySegment Mvec_e15i$address() {
        return Mvec_e15i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e15i()
     * }
     */
    public static MemorySegment Mvec_e15i() {
        var mh$ = Mvec_e15i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e15i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e234 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e234");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234()
     * }
     */
    public static FunctionDescriptor Mvec_e234$descriptor() {
        return Mvec_e234.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234()
     * }
     */
    public static MethodHandle Mvec_e234$handle() {
        return Mvec_e234.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234()
     * }
     */
    public static MemorySegment Mvec_e234$address() {
        return Mvec_e234.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e234()
     * }
     */
    public static MemorySegment Mvec_e234() {
        var mh$ = Mvec_e234.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e234");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e235 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e235");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235()
     * }
     */
    public static FunctionDescriptor Mvec_e235$descriptor() {
        return Mvec_e235.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235()
     * }
     */
    public static MethodHandle Mvec_e235$handle() {
        return Mvec_e235.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235()
     * }
     */
    public static MemorySegment Mvec_e235$address() {
        return Mvec_e235.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e235()
     * }
     */
    public static MemorySegment Mvec_e235() {
        var mh$ = Mvec_e235.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e235");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e23i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e23i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23i()
     * }
     */
    public static FunctionDescriptor Mvec_e23i$descriptor() {
        return Mvec_e23i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23i()
     * }
     */
    public static MethodHandle Mvec_e23i$handle() {
        return Mvec_e23i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e23i()
     * }
     */
    public static MemorySegment Mvec_e23i$address() {
        return Mvec_e23i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e23i()
     * }
     */
    public static MemorySegment Mvec_e23i() {
        var mh$ = Mvec_e23i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e23i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e245 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e245");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245()
     * }
     */
    public static FunctionDescriptor Mvec_e245$descriptor() {
        return Mvec_e245.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245()
     * }
     */
    public static MethodHandle Mvec_e245$handle() {
        return Mvec_e245.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245()
     * }
     */
    public static MemorySegment Mvec_e245$address() {
        return Mvec_e245.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e245()
     * }
     */
    public static MemorySegment Mvec_e245() {
        var mh$ = Mvec_e245.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e245");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e24i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e24i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24i()
     * }
     */
    public static FunctionDescriptor Mvec_e24i$descriptor() {
        return Mvec_e24i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24i()
     * }
     */
    public static MethodHandle Mvec_e24i$handle() {
        return Mvec_e24i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e24i()
     * }
     */
    public static MemorySegment Mvec_e24i$address() {
        return Mvec_e24i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e24i()
     * }
     */
    public static MemorySegment Mvec_e24i() {
        var mh$ = Mvec_e24i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e24i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e25i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e25i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25i()
     * }
     */
    public static FunctionDescriptor Mvec_e25i$descriptor() {
        return Mvec_e25i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25i()
     * }
     */
    public static MethodHandle Mvec_e25i$handle() {
        return Mvec_e25i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e25i()
     * }
     */
    public static MemorySegment Mvec_e25i$address() {
        return Mvec_e25i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e25i()
     * }
     */
    public static MemorySegment Mvec_e25i() {
        var mh$ = Mvec_e25i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e25i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345()
     * }
     */
    public static FunctionDescriptor Mvec_e345$descriptor() {
        return Mvec_e345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345()
     * }
     */
    public static MethodHandle Mvec_e345$handle() {
        return Mvec_e345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345()
     * }
     */
    public static MemorySegment Mvec_e345$address() {
        return Mvec_e345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e345()
     * }
     */
    public static MemorySegment Mvec_e345() {
        var mh$ = Mvec_e345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e34i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e34i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34i()
     * }
     */
    public static FunctionDescriptor Mvec_e34i$descriptor() {
        return Mvec_e34i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34i()
     * }
     */
    public static MethodHandle Mvec_e34i$handle() {
        return Mvec_e34i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e34i()
     * }
     */
    public static MemorySegment Mvec_e34i$address() {
        return Mvec_e34i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e34i()
     * }
     */
    public static MemorySegment Mvec_e34i() {
        var mh$ = Mvec_e34i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e34i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e35i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e35i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35i()
     * }
     */
    public static FunctionDescriptor Mvec_e35i$descriptor() {
        return Mvec_e35i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35i()
     * }
     */
    public static MethodHandle Mvec_e35i$handle() {
        return Mvec_e35i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e35i()
     * }
     */
    public static MemorySegment Mvec_e35i$address() {
        return Mvec_e35i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e35i()
     * }
     */
    public static MemorySegment Mvec_e35i() {
        var mh$ = Mvec_e35i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e35i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e45i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e45i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45i()
     * }
     */
    public static FunctionDescriptor Mvec_e45i$descriptor() {
        return Mvec_e45i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45i()
     * }
     */
    public static MethodHandle Mvec_e45i$handle() {
        return Mvec_e45i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e45i()
     * }
     */
    public static MemorySegment Mvec_e45i$address() {
        return Mvec_e45i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e45i()
     * }
     */
    public static MemorySegment Mvec_e45i() {
        var mh$ = Mvec_e45i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e45i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0123 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0123");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123()
     * }
     */
    public static FunctionDescriptor Mvec_e0123$descriptor() {
        return Mvec_e0123.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123()
     * }
     */
    public static MethodHandle Mvec_e0123$handle() {
        return Mvec_e0123.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123()
     * }
     */
    public static MemorySegment Mvec_e0123$address() {
        return Mvec_e0123.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123()
     * }
     */
    public static MemorySegment Mvec_e0123() {
        var mh$ = Mvec_e0123.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0123");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0124 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0124");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124()
     * }
     */
    public static FunctionDescriptor Mvec_e0124$descriptor() {
        return Mvec_e0124.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124()
     * }
     */
    public static MethodHandle Mvec_e0124$handle() {
        return Mvec_e0124.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124()
     * }
     */
    public static MemorySegment Mvec_e0124$address() {
        return Mvec_e0124.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124()
     * }
     */
    public static MemorySegment Mvec_e0124() {
        var mh$ = Mvec_e0124.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0124");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0125 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0125");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125()
     * }
     */
    public static FunctionDescriptor Mvec_e0125$descriptor() {
        return Mvec_e0125.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125()
     * }
     */
    public static MethodHandle Mvec_e0125$handle() {
        return Mvec_e0125.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125()
     * }
     */
    public static MemorySegment Mvec_e0125$address() {
        return Mvec_e0125.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125()
     * }
     */
    public static MemorySegment Mvec_e0125() {
        var mh$ = Mvec_e0125.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0125");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e012i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e012i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012i()
     * }
     */
    public static FunctionDescriptor Mvec_e012i$descriptor() {
        return Mvec_e012i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012i()
     * }
     */
    public static MethodHandle Mvec_e012i$handle() {
        return Mvec_e012i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012i()
     * }
     */
    public static MemorySegment Mvec_e012i$address() {
        return Mvec_e012i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e012i()
     * }
     */
    public static MemorySegment Mvec_e012i() {
        var mh$ = Mvec_e012i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e012i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0134 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0134");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134()
     * }
     */
    public static FunctionDescriptor Mvec_e0134$descriptor() {
        return Mvec_e0134.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134()
     * }
     */
    public static MethodHandle Mvec_e0134$handle() {
        return Mvec_e0134.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134()
     * }
     */
    public static MemorySegment Mvec_e0134$address() {
        return Mvec_e0134.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134()
     * }
     */
    public static MemorySegment Mvec_e0134() {
        var mh$ = Mvec_e0134.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0134");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0135 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0135");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135()
     * }
     */
    public static FunctionDescriptor Mvec_e0135$descriptor() {
        return Mvec_e0135.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135()
     * }
     */
    public static MethodHandle Mvec_e0135$handle() {
        return Mvec_e0135.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135()
     * }
     */
    public static MemorySegment Mvec_e0135$address() {
        return Mvec_e0135.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135()
     * }
     */
    public static MemorySegment Mvec_e0135() {
        var mh$ = Mvec_e0135.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0135");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e013i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e013i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013i()
     * }
     */
    public static FunctionDescriptor Mvec_e013i$descriptor() {
        return Mvec_e013i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013i()
     * }
     */
    public static MethodHandle Mvec_e013i$handle() {
        return Mvec_e013i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e013i()
     * }
     */
    public static MemorySegment Mvec_e013i$address() {
        return Mvec_e013i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e013i()
     * }
     */
    public static MemorySegment Mvec_e013i() {
        var mh$ = Mvec_e013i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e013i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0145 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0145");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145()
     * }
     */
    public static FunctionDescriptor Mvec_e0145$descriptor() {
        return Mvec_e0145.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145()
     * }
     */
    public static MethodHandle Mvec_e0145$handle() {
        return Mvec_e0145.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145()
     * }
     */
    public static MemorySegment Mvec_e0145$address() {
        return Mvec_e0145.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145()
     * }
     */
    public static MemorySegment Mvec_e0145() {
        var mh$ = Mvec_e0145.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0145");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e014i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e014i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014i()
     * }
     */
    public static FunctionDescriptor Mvec_e014i$descriptor() {
        return Mvec_e014i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014i()
     * }
     */
    public static MethodHandle Mvec_e014i$handle() {
        return Mvec_e014i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e014i()
     * }
     */
    public static MemorySegment Mvec_e014i$address() {
        return Mvec_e014i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e014i()
     * }
     */
    public static MemorySegment Mvec_e014i() {
        var mh$ = Mvec_e014i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e014i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e015i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e015i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015i()
     * }
     */
    public static FunctionDescriptor Mvec_e015i$descriptor() {
        return Mvec_e015i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015i()
     * }
     */
    public static MethodHandle Mvec_e015i$handle() {
        return Mvec_e015i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e015i()
     * }
     */
    public static MemorySegment Mvec_e015i$address() {
        return Mvec_e015i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e015i()
     * }
     */
    public static MemorySegment Mvec_e015i() {
        var mh$ = Mvec_e015i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e015i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0234 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0234");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234()
     * }
     */
    public static FunctionDescriptor Mvec_e0234$descriptor() {
        return Mvec_e0234.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234()
     * }
     */
    public static MethodHandle Mvec_e0234$handle() {
        return Mvec_e0234.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234()
     * }
     */
    public static MemorySegment Mvec_e0234$address() {
        return Mvec_e0234.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234()
     * }
     */
    public static MemorySegment Mvec_e0234() {
        var mh$ = Mvec_e0234.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0234");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0235 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0235");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235()
     * }
     */
    public static FunctionDescriptor Mvec_e0235$descriptor() {
        return Mvec_e0235.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235()
     * }
     */
    public static MethodHandle Mvec_e0235$handle() {
        return Mvec_e0235.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235()
     * }
     */
    public static MemorySegment Mvec_e0235$address() {
        return Mvec_e0235.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235()
     * }
     */
    public static MemorySegment Mvec_e0235() {
        var mh$ = Mvec_e0235.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0235");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e023i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e023i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023i()
     * }
     */
    public static FunctionDescriptor Mvec_e023i$descriptor() {
        return Mvec_e023i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023i()
     * }
     */
    public static MethodHandle Mvec_e023i$handle() {
        return Mvec_e023i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e023i()
     * }
     */
    public static MemorySegment Mvec_e023i$address() {
        return Mvec_e023i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e023i()
     * }
     */
    public static MemorySegment Mvec_e023i() {
        var mh$ = Mvec_e023i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e023i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0245 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0245");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245()
     * }
     */
    public static FunctionDescriptor Mvec_e0245$descriptor() {
        return Mvec_e0245.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245()
     * }
     */
    public static MethodHandle Mvec_e0245$handle() {
        return Mvec_e0245.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245()
     * }
     */
    public static MemorySegment Mvec_e0245$address() {
        return Mvec_e0245.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245()
     * }
     */
    public static MemorySegment Mvec_e0245() {
        var mh$ = Mvec_e0245.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0245");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e024i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e024i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024i()
     * }
     */
    public static FunctionDescriptor Mvec_e024i$descriptor() {
        return Mvec_e024i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024i()
     * }
     */
    public static MethodHandle Mvec_e024i$handle() {
        return Mvec_e024i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e024i()
     * }
     */
    public static MemorySegment Mvec_e024i$address() {
        return Mvec_e024i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e024i()
     * }
     */
    public static MemorySegment Mvec_e024i() {
        var mh$ = Mvec_e024i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e024i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e025i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e025i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025i()
     * }
     */
    public static FunctionDescriptor Mvec_e025i$descriptor() {
        return Mvec_e025i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025i()
     * }
     */
    public static MethodHandle Mvec_e025i$handle() {
        return Mvec_e025i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e025i()
     * }
     */
    public static MemorySegment Mvec_e025i$address() {
        return Mvec_e025i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e025i()
     * }
     */
    public static MemorySegment Mvec_e025i() {
        var mh$ = Mvec_e025i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e025i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345()
     * }
     */
    public static FunctionDescriptor Mvec_e0345$descriptor() {
        return Mvec_e0345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345()
     * }
     */
    public static MethodHandle Mvec_e0345$handle() {
        return Mvec_e0345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345()
     * }
     */
    public static MemorySegment Mvec_e0345$address() {
        return Mvec_e0345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345()
     * }
     */
    public static MemorySegment Mvec_e0345() {
        var mh$ = Mvec_e0345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e034i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e034i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034i()
     * }
     */
    public static FunctionDescriptor Mvec_e034i$descriptor() {
        return Mvec_e034i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034i()
     * }
     */
    public static MethodHandle Mvec_e034i$handle() {
        return Mvec_e034i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e034i()
     * }
     */
    public static MemorySegment Mvec_e034i$address() {
        return Mvec_e034i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e034i()
     * }
     */
    public static MemorySegment Mvec_e034i() {
        var mh$ = Mvec_e034i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e034i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e035i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e035i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035i()
     * }
     */
    public static FunctionDescriptor Mvec_e035i$descriptor() {
        return Mvec_e035i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035i()
     * }
     */
    public static MethodHandle Mvec_e035i$handle() {
        return Mvec_e035i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e035i()
     * }
     */
    public static MemorySegment Mvec_e035i$address() {
        return Mvec_e035i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e035i()
     * }
     */
    public static MemorySegment Mvec_e035i() {
        var mh$ = Mvec_e035i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e035i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e045i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e045i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045i()
     * }
     */
    public static FunctionDescriptor Mvec_e045i$descriptor() {
        return Mvec_e045i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045i()
     * }
     */
    public static MethodHandle Mvec_e045i$handle() {
        return Mvec_e045i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e045i()
     * }
     */
    public static MemorySegment Mvec_e045i$address() {
        return Mvec_e045i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e045i()
     * }
     */
    public static MemorySegment Mvec_e045i() {
        var mh$ = Mvec_e045i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e045i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1234 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1234");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234()
     * }
     */
    public static FunctionDescriptor Mvec_e1234$descriptor() {
        return Mvec_e1234.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234()
     * }
     */
    public static MethodHandle Mvec_e1234$handle() {
        return Mvec_e1234.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234()
     * }
     */
    public static MemorySegment Mvec_e1234$address() {
        return Mvec_e1234.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234()
     * }
     */
    public static MemorySegment Mvec_e1234() {
        var mh$ = Mvec_e1234.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1234");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1235 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1235");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235()
     * }
     */
    public static FunctionDescriptor Mvec_e1235$descriptor() {
        return Mvec_e1235.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235()
     * }
     */
    public static MethodHandle Mvec_e1235$handle() {
        return Mvec_e1235.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235()
     * }
     */
    public static MemorySegment Mvec_e1235$address() {
        return Mvec_e1235.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235()
     * }
     */
    public static MemorySegment Mvec_e1235() {
        var mh$ = Mvec_e1235.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1235");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e123i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e123i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123i()
     * }
     */
    public static FunctionDescriptor Mvec_e123i$descriptor() {
        return Mvec_e123i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123i()
     * }
     */
    public static MethodHandle Mvec_e123i$handle() {
        return Mvec_e123i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e123i()
     * }
     */
    public static MemorySegment Mvec_e123i$address() {
        return Mvec_e123i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e123i()
     * }
     */
    public static MemorySegment Mvec_e123i() {
        var mh$ = Mvec_e123i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e123i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1245 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1245");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245()
     * }
     */
    public static FunctionDescriptor Mvec_e1245$descriptor() {
        return Mvec_e1245.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245()
     * }
     */
    public static MethodHandle Mvec_e1245$handle() {
        return Mvec_e1245.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245()
     * }
     */
    public static MemorySegment Mvec_e1245$address() {
        return Mvec_e1245.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245()
     * }
     */
    public static MemorySegment Mvec_e1245() {
        var mh$ = Mvec_e1245.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1245");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e124i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e124i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124i()
     * }
     */
    public static FunctionDescriptor Mvec_e124i$descriptor() {
        return Mvec_e124i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124i()
     * }
     */
    public static MethodHandle Mvec_e124i$handle() {
        return Mvec_e124i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e124i()
     * }
     */
    public static MemorySegment Mvec_e124i$address() {
        return Mvec_e124i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e124i()
     * }
     */
    public static MemorySegment Mvec_e124i() {
        var mh$ = Mvec_e124i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e124i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e125i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e125i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125i()
     * }
     */
    public static FunctionDescriptor Mvec_e125i$descriptor() {
        return Mvec_e125i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125i()
     * }
     */
    public static MethodHandle Mvec_e125i$handle() {
        return Mvec_e125i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e125i()
     * }
     */
    public static MemorySegment Mvec_e125i$address() {
        return Mvec_e125i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e125i()
     * }
     */
    public static MemorySegment Mvec_e125i() {
        var mh$ = Mvec_e125i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e125i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345()
     * }
     */
    public static FunctionDescriptor Mvec_e1345$descriptor() {
        return Mvec_e1345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345()
     * }
     */
    public static MethodHandle Mvec_e1345$handle() {
        return Mvec_e1345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345()
     * }
     */
    public static MemorySegment Mvec_e1345$address() {
        return Mvec_e1345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345()
     * }
     */
    public static MemorySegment Mvec_e1345() {
        var mh$ = Mvec_e1345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e134i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e134i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134i()
     * }
     */
    public static FunctionDescriptor Mvec_e134i$descriptor() {
        return Mvec_e134i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134i()
     * }
     */
    public static MethodHandle Mvec_e134i$handle() {
        return Mvec_e134i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e134i()
     * }
     */
    public static MemorySegment Mvec_e134i$address() {
        return Mvec_e134i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e134i()
     * }
     */
    public static MemorySegment Mvec_e134i() {
        var mh$ = Mvec_e134i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e134i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e135i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e135i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135i()
     * }
     */
    public static FunctionDescriptor Mvec_e135i$descriptor() {
        return Mvec_e135i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135i()
     * }
     */
    public static MethodHandle Mvec_e135i$handle() {
        return Mvec_e135i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e135i()
     * }
     */
    public static MemorySegment Mvec_e135i$address() {
        return Mvec_e135i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e135i()
     * }
     */
    public static MemorySegment Mvec_e135i() {
        var mh$ = Mvec_e135i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e135i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e145i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e145i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145i()
     * }
     */
    public static FunctionDescriptor Mvec_e145i$descriptor() {
        return Mvec_e145i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145i()
     * }
     */
    public static MethodHandle Mvec_e145i$handle() {
        return Mvec_e145i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e145i()
     * }
     */
    public static MemorySegment Mvec_e145i$address() {
        return Mvec_e145i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e145i()
     * }
     */
    public static MemorySegment Mvec_e145i() {
        var mh$ = Mvec_e145i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e145i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e2345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e2345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345()
     * }
     */
    public static FunctionDescriptor Mvec_e2345$descriptor() {
        return Mvec_e2345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345()
     * }
     */
    public static MethodHandle Mvec_e2345$handle() {
        return Mvec_e2345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345()
     * }
     */
    public static MemorySegment Mvec_e2345$address() {
        return Mvec_e2345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345()
     * }
     */
    public static MemorySegment Mvec_e2345() {
        var mh$ = Mvec_e2345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e2345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e234i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e234i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234i()
     * }
     */
    public static FunctionDescriptor Mvec_e234i$descriptor() {
        return Mvec_e234i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234i()
     * }
     */
    public static MethodHandle Mvec_e234i$handle() {
        return Mvec_e234i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e234i()
     * }
     */
    public static MemorySegment Mvec_e234i$address() {
        return Mvec_e234i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e234i()
     * }
     */
    public static MemorySegment Mvec_e234i() {
        var mh$ = Mvec_e234i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e234i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e235i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e235i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235i()
     * }
     */
    public static FunctionDescriptor Mvec_e235i$descriptor() {
        return Mvec_e235i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235i()
     * }
     */
    public static MethodHandle Mvec_e235i$handle() {
        return Mvec_e235i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e235i()
     * }
     */
    public static MemorySegment Mvec_e235i$address() {
        return Mvec_e235i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e235i()
     * }
     */
    public static MemorySegment Mvec_e235i() {
        var mh$ = Mvec_e235i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e235i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e245i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e245i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245i()
     * }
     */
    public static FunctionDescriptor Mvec_e245i$descriptor() {
        return Mvec_e245i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245i()
     * }
     */
    public static MethodHandle Mvec_e245i$handle() {
        return Mvec_e245i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e245i()
     * }
     */
    public static MemorySegment Mvec_e245i$address() {
        return Mvec_e245i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e245i()
     * }
     */
    public static MemorySegment Mvec_e245i() {
        var mh$ = Mvec_e245i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e245i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345i()
     * }
     */
    public static FunctionDescriptor Mvec_e345i$descriptor() {
        return Mvec_e345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345i()
     * }
     */
    public static MethodHandle Mvec_e345i$handle() {
        return Mvec_e345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e345i()
     * }
     */
    public static MemorySegment Mvec_e345i$address() {
        return Mvec_e345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e345i()
     * }
     */
    public static MemorySegment Mvec_e345i() {
        var mh$ = Mvec_e345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01234 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01234");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234()
     * }
     */
    public static FunctionDescriptor Mvec_e01234$descriptor() {
        return Mvec_e01234.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234()
     * }
     */
    public static MethodHandle Mvec_e01234$handle() {
        return Mvec_e01234.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234()
     * }
     */
    public static MemorySegment Mvec_e01234$address() {
        return Mvec_e01234.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234()
     * }
     */
    public static MemorySegment Mvec_e01234() {
        var mh$ = Mvec_e01234.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01234");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01235 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01235");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235()
     * }
     */
    public static FunctionDescriptor Mvec_e01235$descriptor() {
        return Mvec_e01235.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235()
     * }
     */
    public static MethodHandle Mvec_e01235$handle() {
        return Mvec_e01235.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235()
     * }
     */
    public static MemorySegment Mvec_e01235$address() {
        return Mvec_e01235.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235()
     * }
     */
    public static MemorySegment Mvec_e01235() {
        var mh$ = Mvec_e01235.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01235");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0123i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0123i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123i()
     * }
     */
    public static FunctionDescriptor Mvec_e0123i$descriptor() {
        return Mvec_e0123i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123i()
     * }
     */
    public static MethodHandle Mvec_e0123i$handle() {
        return Mvec_e0123i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123i()
     * }
     */
    public static MemorySegment Mvec_e0123i$address() {
        return Mvec_e0123i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0123i()
     * }
     */
    public static MemorySegment Mvec_e0123i() {
        var mh$ = Mvec_e0123i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0123i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01245 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01245");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245()
     * }
     */
    public static FunctionDescriptor Mvec_e01245$descriptor() {
        return Mvec_e01245.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245()
     * }
     */
    public static MethodHandle Mvec_e01245$handle() {
        return Mvec_e01245.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245()
     * }
     */
    public static MemorySegment Mvec_e01245$address() {
        return Mvec_e01245.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245()
     * }
     */
    public static MemorySegment Mvec_e01245() {
        var mh$ = Mvec_e01245.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01245");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0124i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0124i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124i()
     * }
     */
    public static FunctionDescriptor Mvec_e0124i$descriptor() {
        return Mvec_e0124i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124i()
     * }
     */
    public static MethodHandle Mvec_e0124i$handle() {
        return Mvec_e0124i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124i()
     * }
     */
    public static MemorySegment Mvec_e0124i$address() {
        return Mvec_e0124i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0124i()
     * }
     */
    public static MemorySegment Mvec_e0124i() {
        var mh$ = Mvec_e0124i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0124i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0125i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0125i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125i()
     * }
     */
    public static FunctionDescriptor Mvec_e0125i$descriptor() {
        return Mvec_e0125i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125i()
     * }
     */
    public static MethodHandle Mvec_e0125i$handle() {
        return Mvec_e0125i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125i()
     * }
     */
    public static MemorySegment Mvec_e0125i$address() {
        return Mvec_e0125i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0125i()
     * }
     */
    public static MemorySegment Mvec_e0125i() {
        var mh$ = Mvec_e0125i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0125i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345()
     * }
     */
    public static FunctionDescriptor Mvec_e01345$descriptor() {
        return Mvec_e01345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345()
     * }
     */
    public static MethodHandle Mvec_e01345$handle() {
        return Mvec_e01345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345()
     * }
     */
    public static MemorySegment Mvec_e01345$address() {
        return Mvec_e01345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345()
     * }
     */
    public static MemorySegment Mvec_e01345() {
        var mh$ = Mvec_e01345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0134i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0134i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134i()
     * }
     */
    public static FunctionDescriptor Mvec_e0134i$descriptor() {
        return Mvec_e0134i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134i()
     * }
     */
    public static MethodHandle Mvec_e0134i$handle() {
        return Mvec_e0134i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134i()
     * }
     */
    public static MemorySegment Mvec_e0134i$address() {
        return Mvec_e0134i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0134i()
     * }
     */
    public static MemorySegment Mvec_e0134i() {
        var mh$ = Mvec_e0134i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0134i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0135i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0135i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135i()
     * }
     */
    public static FunctionDescriptor Mvec_e0135i$descriptor() {
        return Mvec_e0135i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135i()
     * }
     */
    public static MethodHandle Mvec_e0135i$handle() {
        return Mvec_e0135i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135i()
     * }
     */
    public static MemorySegment Mvec_e0135i$address() {
        return Mvec_e0135i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0135i()
     * }
     */
    public static MemorySegment Mvec_e0135i() {
        var mh$ = Mvec_e0135i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0135i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0145i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0145i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145i()
     * }
     */
    public static FunctionDescriptor Mvec_e0145i$descriptor() {
        return Mvec_e0145i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145i()
     * }
     */
    public static MethodHandle Mvec_e0145i$handle() {
        return Mvec_e0145i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145i()
     * }
     */
    public static MemorySegment Mvec_e0145i$address() {
        return Mvec_e0145i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0145i()
     * }
     */
    public static MemorySegment Mvec_e0145i() {
        var mh$ = Mvec_e0145i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0145i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e02345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e02345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345()
     * }
     */
    public static FunctionDescriptor Mvec_e02345$descriptor() {
        return Mvec_e02345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345()
     * }
     */
    public static MethodHandle Mvec_e02345$handle() {
        return Mvec_e02345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345()
     * }
     */
    public static MemorySegment Mvec_e02345$address() {
        return Mvec_e02345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345()
     * }
     */
    public static MemorySegment Mvec_e02345() {
        var mh$ = Mvec_e02345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e02345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0234i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0234i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234i()
     * }
     */
    public static FunctionDescriptor Mvec_e0234i$descriptor() {
        return Mvec_e0234i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234i()
     * }
     */
    public static MethodHandle Mvec_e0234i$handle() {
        return Mvec_e0234i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234i()
     * }
     */
    public static MemorySegment Mvec_e0234i$address() {
        return Mvec_e0234i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0234i()
     * }
     */
    public static MemorySegment Mvec_e0234i() {
        var mh$ = Mvec_e0234i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0234i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0235i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0235i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235i()
     * }
     */
    public static FunctionDescriptor Mvec_e0235i$descriptor() {
        return Mvec_e0235i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235i()
     * }
     */
    public static MethodHandle Mvec_e0235i$handle() {
        return Mvec_e0235i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235i()
     * }
     */
    public static MemorySegment Mvec_e0235i$address() {
        return Mvec_e0235i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0235i()
     * }
     */
    public static MemorySegment Mvec_e0235i() {
        var mh$ = Mvec_e0235i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0235i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0245i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0245i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245i()
     * }
     */
    public static FunctionDescriptor Mvec_e0245i$descriptor() {
        return Mvec_e0245i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245i()
     * }
     */
    public static MethodHandle Mvec_e0245i$handle() {
        return Mvec_e0245i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245i()
     * }
     */
    public static MemorySegment Mvec_e0245i$address() {
        return Mvec_e0245i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0245i()
     * }
     */
    public static MemorySegment Mvec_e0245i() {
        var mh$ = Mvec_e0245i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0245i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e0345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e0345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345i()
     * }
     */
    public static FunctionDescriptor Mvec_e0345i$descriptor() {
        return Mvec_e0345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345i()
     * }
     */
    public static MethodHandle Mvec_e0345i$handle() {
        return Mvec_e0345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345i()
     * }
     */
    public static MemorySegment Mvec_e0345i$address() {
        return Mvec_e0345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e0345i()
     * }
     */
    public static MemorySegment Mvec_e0345i() {
        var mh$ = Mvec_e0345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e0345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e12345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e12345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345()
     * }
     */
    public static FunctionDescriptor Mvec_e12345$descriptor() {
        return Mvec_e12345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345()
     * }
     */
    public static MethodHandle Mvec_e12345$handle() {
        return Mvec_e12345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345()
     * }
     */
    public static MemorySegment Mvec_e12345$address() {
        return Mvec_e12345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345()
     * }
     */
    public static MemorySegment Mvec_e12345() {
        var mh$ = Mvec_e12345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e12345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1234i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1234i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234i()
     * }
     */
    public static FunctionDescriptor Mvec_e1234i$descriptor() {
        return Mvec_e1234i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234i()
     * }
     */
    public static MethodHandle Mvec_e1234i$handle() {
        return Mvec_e1234i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234i()
     * }
     */
    public static MemorySegment Mvec_e1234i$address() {
        return Mvec_e1234i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1234i()
     * }
     */
    public static MemorySegment Mvec_e1234i() {
        var mh$ = Mvec_e1234i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1234i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1235i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1235i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235i()
     * }
     */
    public static FunctionDescriptor Mvec_e1235i$descriptor() {
        return Mvec_e1235i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235i()
     * }
     */
    public static MethodHandle Mvec_e1235i$handle() {
        return Mvec_e1235i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235i()
     * }
     */
    public static MemorySegment Mvec_e1235i$address() {
        return Mvec_e1235i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1235i()
     * }
     */
    public static MemorySegment Mvec_e1235i() {
        var mh$ = Mvec_e1235i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1235i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1245i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1245i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245i()
     * }
     */
    public static FunctionDescriptor Mvec_e1245i$descriptor() {
        return Mvec_e1245i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245i()
     * }
     */
    public static MethodHandle Mvec_e1245i$handle() {
        return Mvec_e1245i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245i()
     * }
     */
    public static MemorySegment Mvec_e1245i$address() {
        return Mvec_e1245i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1245i()
     * }
     */
    public static MemorySegment Mvec_e1245i() {
        var mh$ = Mvec_e1245i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1245i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e1345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e1345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345i()
     * }
     */
    public static FunctionDescriptor Mvec_e1345i$descriptor() {
        return Mvec_e1345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345i()
     * }
     */
    public static MethodHandle Mvec_e1345i$handle() {
        return Mvec_e1345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345i()
     * }
     */
    public static MemorySegment Mvec_e1345i$address() {
        return Mvec_e1345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e1345i()
     * }
     */
    public static MemorySegment Mvec_e1345i() {
        var mh$ = Mvec_e1345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e1345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e2345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e2345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345i()
     * }
     */
    public static FunctionDescriptor Mvec_e2345i$descriptor() {
        return Mvec_e2345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345i()
     * }
     */
    public static MethodHandle Mvec_e2345i$handle() {
        return Mvec_e2345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345i()
     * }
     */
    public static MemorySegment Mvec_e2345i$address() {
        return Mvec_e2345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e2345i()
     * }
     */
    public static MemorySegment Mvec_e2345i() {
        var mh$ = Mvec_e2345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e2345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e012345 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e012345");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345()
     * }
     */
    public static FunctionDescriptor Mvec_e012345$descriptor() {
        return Mvec_e012345.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345()
     * }
     */
    public static MethodHandle Mvec_e012345$handle() {
        return Mvec_e012345.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345()
     * }
     */
    public static MemorySegment Mvec_e012345$address() {
        return Mvec_e012345.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345()
     * }
     */
    public static MemorySegment Mvec_e012345() {
        var mh$ = Mvec_e012345.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e012345");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01234i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01234i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234i()
     * }
     */
    public static FunctionDescriptor Mvec_e01234i$descriptor() {
        return Mvec_e01234i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234i()
     * }
     */
    public static MethodHandle Mvec_e01234i$handle() {
        return Mvec_e01234i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234i()
     * }
     */
    public static MemorySegment Mvec_e01234i$address() {
        return Mvec_e01234i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01234i()
     * }
     */
    public static MemorySegment Mvec_e01234i() {
        var mh$ = Mvec_e01234i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01234i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01235i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01235i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235i()
     * }
     */
    public static FunctionDescriptor Mvec_e01235i$descriptor() {
        return Mvec_e01235i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235i()
     * }
     */
    public static MethodHandle Mvec_e01235i$handle() {
        return Mvec_e01235i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235i()
     * }
     */
    public static MemorySegment Mvec_e01235i$address() {
        return Mvec_e01235i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01235i()
     * }
     */
    public static MemorySegment Mvec_e01235i() {
        var mh$ = Mvec_e01235i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01235i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01245i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01245i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245i()
     * }
     */
    public static FunctionDescriptor Mvec_e01245i$descriptor() {
        return Mvec_e01245i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245i()
     * }
     */
    public static MethodHandle Mvec_e01245i$handle() {
        return Mvec_e01245i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245i()
     * }
     */
    public static MemorySegment Mvec_e01245i$address() {
        return Mvec_e01245i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01245i()
     * }
     */
    public static MemorySegment Mvec_e01245i() {
        var mh$ = Mvec_e01245i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01245i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e01345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e01345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345i()
     * }
     */
    public static FunctionDescriptor Mvec_e01345i$descriptor() {
        return Mvec_e01345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345i()
     * }
     */
    public static MethodHandle Mvec_e01345i$handle() {
        return Mvec_e01345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345i()
     * }
     */
    public static MemorySegment Mvec_e01345i$address() {
        return Mvec_e01345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e01345i()
     * }
     */
    public static MemorySegment Mvec_e01345i() {
        var mh$ = Mvec_e01345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e01345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e02345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e02345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345i()
     * }
     */
    public static FunctionDescriptor Mvec_e02345i$descriptor() {
        return Mvec_e02345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345i()
     * }
     */
    public static MethodHandle Mvec_e02345i$handle() {
        return Mvec_e02345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345i()
     * }
     */
    public static MemorySegment Mvec_e02345i$address() {
        return Mvec_e02345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e02345i()
     * }
     */
    public static MemorySegment Mvec_e02345i() {
        var mh$ = Mvec_e02345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e02345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e12345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e12345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345i()
     * }
     */
    public static FunctionDescriptor Mvec_e12345i$descriptor() {
        return Mvec_e12345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345i()
     * }
     */
    public static MethodHandle Mvec_e12345i$handle() {
        return Mvec_e12345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345i()
     * }
     */
    public static MemorySegment Mvec_e12345i$address() {
        return Mvec_e12345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e12345i()
     * }
     */
    public static MemorySegment Mvec_e12345i() {
        var mh$ = Mvec_e12345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e12345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_e012345i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_e012345i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345i()
     * }
     */
    public static FunctionDescriptor Mvec_e012345i$descriptor() {
        return Mvec_e012345i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345i()
     * }
     */
    public static MethodHandle Mvec_e012345i$handle() {
        return Mvec_e012345i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345i()
     * }
     */
    public static MemorySegment Mvec_e012345i$address() {
        return Mvec_e012345i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_e012345i()
     * }
     */
    public static MemorySegment Mvec_e012345i() {
        var mh$ = Mvec_e012345i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_e012345i");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_left_contraction_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_left_contraction_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_left_contraction_func$descriptor() {
        return Mvec_left_contraction_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_left_contraction_func$handle() {
        return Mvec_left_contraction_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_left_contraction_func$address() {
        return Mvec_left_contraction_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_left_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_left_contraction_func(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_left_contraction_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_left_contraction_func", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_right_contraction_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_right_contraction_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_right_contraction_func$descriptor() {
        return Mvec_right_contraction_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_right_contraction_func$handle() {
        return Mvec_right_contraction_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_right_contraction_func$address() {
        return Mvec_right_contraction_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_right_contraction_func(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_right_contraction_func(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_right_contraction_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_right_contraction_func", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_I {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_I");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_I()
     * }
     */
    public static FunctionDescriptor Mvec_I$descriptor() {
        return Mvec_I.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_I()
     * }
     */
    public static MethodHandle Mvec_I$handle() {
        return Mvec_I.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_I()
     * }
     */
    public static MemorySegment Mvec_I$address() {
        return Mvec_I.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_I()
     * }
     */
    public static MemorySegment Mvec_I() {
        var mh$ = Mvec_I.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_I");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_Iinv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER    );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_Iinv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_Iinv()
     * }
     */
    public static FunctionDescriptor Mvec_Iinv$descriptor() {
        return Mvec_Iinv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_Iinv()
     * }
     */
    public static MethodHandle Mvec_Iinv$handle() {
        return Mvec_Iinv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_Iinv()
     * }
     */
    public static MemorySegment Mvec_Iinv$address() {
        return Mvec_Iinv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_Iinv()
     * }
     */
    public static MemorySegment Mvec_Iinv() {
        var mh$ = Mvec_Iinv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_Iinv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_scalar_product {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_scalar_product");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_scalar_product$descriptor() {
        return Mvec_scalar_product.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_scalar_product$handle() {
        return Mvec_scalar_product.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_scalar_product$address() {
        return Mvec_scalar_product.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_scalar_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_scalar_product(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_scalar_product.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_scalar_product", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_dot_product {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_dot_product");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dot_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_dot_product$descriptor() {
        return Mvec_dot_product.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dot_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_dot_product$handle() {
        return Mvec_dot_product.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dot_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_dot_product$address() {
        return Mvec_dot_product.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_dot_product(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_dot_product(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_dot_product.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_dot_product", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer_primal_dual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer_primal_dual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_primal_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_outer_primal_dual$descriptor() {
        return Mvec_outer_primal_dual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_primal_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_outer_primal_dual$handle() {
        return Mvec_outer_primal_dual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_primal_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_primal_dual$address() {
        return Mvec_outer_primal_dual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_primal_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_primal_dual(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_outer_primal_dual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer_primal_dual", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer_dual_primal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer_dual_primal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_primal(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_outer_dual_primal$descriptor() {
        return Mvec_outer_dual_primal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_primal(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_outer_dual_primal$handle() {
        return Mvec_outer_dual_primal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_primal(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_dual_primal$address() {
        return Mvec_outer_dual_primal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_primal(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_dual_primal(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_outer_dual_primal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer_dual_primal", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_outer_dual_dual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_outer_dual_dual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static FunctionDescriptor Mvec_outer_dual_dual$descriptor() {
        return Mvec_outer_dual_dual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MethodHandle Mvec_outer_dual_dual$handle() {
        return Mvec_outer_dual_dual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_dual_dual$address() {
        return Mvec_outer_dual_dual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_outer_dual_dual(const Mvec_C mv1, const Mvec_C mv2)
     * }
     */
    public static MemorySegment Mvec_outer_dual_dual(MemorySegment mv1, MemorySegment mv2) {
        var mh$ = Mvec_outer_dual_dual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_outer_dual_dual", mv1, mv2);
            }
            return (MemorySegment)mh$.invokeExact(mv1, mv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Mvec_dual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("Mvec_dual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dual(const Mvec_C mv)
     * }
     */
    public static FunctionDescriptor Mvec_dual$descriptor() {
        return Mvec_dual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dual(const Mvec_C mv)
     * }
     */
    public static MethodHandle Mvec_dual$handle() {
        return Mvec_dual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Mvec_C Mvec_dual(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_dual$address() {
        return Mvec_dual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Mvec_C Mvec_dual(const Mvec_C mv)
     * }
     */
    public static MemorySegment Mvec_dual(MemorySegment mv) {
        var mh$ = Mvec_dual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Mvec_dual", mv);
            }
            return (MemorySegment)mh$.invokeExact(mv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class garamon_parser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER,
            Mvec_h.C_POINTER
        );

        public static final MemorySegment ADDR = Mvec_h.findOrThrow("garamon_parser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *garamon_parser(const char *data, const char *tmpl_one_component, const char *tmpl_constants)
     * }
     */
    public static FunctionDescriptor garamon_parser$descriptor() {
        return garamon_parser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *garamon_parser(const char *data, const char *tmpl_one_component, const char *tmpl_constants)
     * }
     */
    public static MethodHandle garamon_parser$handle() {
        return garamon_parser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *garamon_parser(const char *data, const char *tmpl_one_component, const char *tmpl_constants)
     * }
     */
    public static MemorySegment garamon_parser$address() {
        return garamon_parser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *garamon_parser(const char *data, const char *tmpl_one_component, const char *tmpl_constants)
     * }
     */
    public static MemorySegment garamon_parser(MemorySegment data, MemorySegment tmpl_one_component, MemorySegment tmpl_constants) {
        var mh$ = garamon_parser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("garamon_parser", data, tmpl_one_component, tmpl_constants);
            }
            return (MemorySegment)mh$.invokeExact(data, tmpl_one_component, tmpl_constants);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define PROJECT_NAMESPACE "c5ga"
     * }
     */
    public static MemorySegment PROJECT_NAMESPACE() {
        class Holder {
            static final MemorySegment PROJECT_NAMESPACE
                = Mvec_h.LIBRARY_ARENA.allocateFrom("c5ga");
        }
        return Holder.PROJECT_NAMESPACE;
    }
    /**
     * {@snippet lang=c :
     * #define PROJECT_FIRST_VECTOR_BASIS "0"
     * }
     */
    public static MemorySegment PROJECT_FIRST_VECTOR_BASIS() {
        class Holder {
            static final MemorySegment PROJECT_FIRST_VECTOR_BASIS
                = Mvec_h.LIBRARY_ARENA.allocateFrom("0");
        }
        return Holder.PROJECT_FIRST_VECTOR_BASIS;
    }
    /**
     * {@snippet lang=c :
     * #define PROJECT_SECOND_VECTOR_BASIS "1"
     * }
     */
    public static MemorySegment PROJECT_SECOND_VECTOR_BASIS() {
        class Holder {
            static final MemorySegment PROJECT_SECOND_VECTOR_BASIS
                = Mvec_h.LIBRARY_ARENA.allocateFrom("1");
        }
        return Holder.PROJECT_SECOND_VECTOR_BASIS;
    }
}

