#!/bin/bash
set -e

# Parse arguments
for arg in "$@"; do
    case $arg in
        --lib=*)
        LIB_PATH="${arg#*=}"
        shift
        ;;
        --mvec_h=*)
        MVEC_H_PATH="${arg#*=}"
        shift
        ;;
        --jextract=*)
        JEXTRACT_PATH="${arg#*=}"
        shift
        ;;
    esac
done

PUBLISH=false

if [ -z "$LIB_PATH" ] || [ -z "$MVEC_H_PATH" ] || [ -z "$JEXTRACT_PATH" ]; then
    echo "Usage: $0 --lib=<path> --mvec_h=<path> --jextract=<path> [--publish]"
    echo ""
    echo "This script generates Java bindings for a Geometric Algebra library generated by Garamon."
    echo "Garamon is a C++ library generator for Geometric Algebra."
    echo ""
    echo "Arguments:"
    echo "  --lib=<path>      Path to the native library (e.g., libmvec.so, mvec.dll)."
    echo "  --mvec_h=<path>   Path to the C header file (e.g., mvec.h) for jextract."
    echo "  --jextract=<path> Path to the jextract tool executable."
    echo "  --publish         Optional. If present, publishes the generated package to Maven local."
    exit 1
fi

# Define variables
BUILD_DIR="build"
ALGEBRA_DIR="$BUILD_DIR/algebra"
ALGEBRA_SRC_MAIN="$ALGEBRA_DIR/src/main/java"
ALGEBRA_SRC_TEST="$ALGEBRA_DIR/src/test/java"
ALGEBRA_LIBS="$ALGEBRA_DIR/libs"
RESOURCES_DIR="$ALGEBRA_DIR/src/main/resources"
NATIVE_DIR="$RESOURCES_DIR/natives"
CLASSES_DIR="$ALGEBRA_DIR/tmp/classes"
TEMPLATES_DIR="templates"

LIB_FILENAME=$(basename "$LIB_PATH")
NO_PREFIX=${LIB_FILENAME#lib}
LIB_LOGICAL_NAME=${NO_PREFIX%%.*}
PKG="org.garamon.$LIB_LOGICAL_NAME"

OS=$(uname -s)
case "$OS" in
    Linux*)   NATIVE_CLASSIFIER="linux-x86_64";;
    Darwin*)  NATIVE_CLASSIFIER="macos-aarch64";;
    CYGWIN*|MINGW*|MSYS*) NATIVE_CLASSIFIER="win-x64";;
    *)        NATIVE_CLASSIFIER="unknown";;
esac
TARGET_NATIVE_DIR="$NATIVE_DIR/$NATIVE_CLASSIFIER"

echo "Preparing algebra skeleton in $ALGEBRA_DIR"
rm -rf "$ALGEBRA_DIR"
mkdir -p "$ALGEBRA_SRC_MAIN" "$ALGEBRA_SRC_TEST" "$ALGEBRA_LIBS" "$TARGET_NATIVE_DIR" "$CLASSES_DIR"

echo "Copying native library and writing properties"
cp "$LIB_PATH" "$TARGET_NATIVE_DIR/"
cp "$LIB_PATH" "$ALGEBRA_LIBS/"

cat > "$RESOURCES_DIR/native-lib.properties" << EOL
native.baseName=${LIB_LOGICAL_NAME}
native.classifier.default=${NATIVE_CLASSIFIER}
EOL

echo "Rendering build scripts"
sed -e "s/\${NAME}/$LIB_LOGICAL_NAME/g" -e "s/\${PKG}/$PKG/g" "$TEMPLATES_DIR/algebra/build.gradle.kts.in" > "$ALGEBRA_DIR/build.gradle.kts"
sed -e "s/\${NAME}/$LIB_LOGICAL_NAME/g" -e "s/\${PKG}/$PKG/g" "$TEMPLATES_DIR/algebra/settings.gradle.kts.in" > "$ALGEBRA_DIR/settings.gradle.kts"

echo "Copying Gradle wrapper"
cp "$TEMPLATES_DIR/wrapper/gradlew" "$TEMPLATES_DIR/wrapper/gradlew.bat" "$ALGEBRA_DIR/"
chmod +x "$ALGEBRA_DIR/gradlew"
mkdir -p "$ALGEBRA_DIR/gradle/wrapper"
cp "$TEMPLATES_DIR/wrapper/gradle/wrapper/"* "$ALGEBRA_DIR/gradle/wrapper/"

echo "Algebra prepared at: $(realpath "$ALGEBRA_DIR")"

echo "Running jextract"
"$JEXTRACT_PATH" \
    -t "$PKG" \
    -l ":$(realpath "$LIB_PATH")" \
    --output "$(realpath "$ALGEBRA_SRC_MAIN")" \
    "$MVEC_H_PATH"

echo "Copying first-stage generator templates"
PKG_PATH=$(echo "$PKG" | tr '.' '/')
TARGET_GEN_DIR="$ALGEBRA_SRC_MAIN/$PKG_PATH"
for file in "$TEMPLATES_DIR/generator/"*.java; do
    sed "s/GENERIC/$LIB_LOGICAL_NAME/g" "$file" > "$TARGET_GEN_DIR/$(basename "$file")"
done

echo "Compiling the minimal parser"
JAVA_FILES=$(find "$TARGET_GEN_DIR" -name "*.java")
javac -d "$CLASSES_DIR" $JAVA_FILES

echo "Running parser for main sources"
MAIN_TEMPLATE_FILES=$(find "$TEMPLATES_DIR" -maxdepth 1 -name "*.java" -print0 | xargs -0)
java --enable-native-access=ALL-UNNAMED -cp "$CLASSES_DIR" -Djava.library.path="$(realpath "$TARGET_NATIVE_DIR")" \
    "$PKG.GaramonParser" \
    -d "$TARGET_GEN_DIR" \
    $MAIN_TEMPLATE_FILES

echo "Running parser for test sources"
TEST_TEMPLATE_FILES=$(find "$TEMPLATES_DIR/tests" -name "*.java" -print0 | xargs -0)
TEST_SRC_DIR="$ALGEBRA_SRC_TEST/$PKG_PATH"
mkdir -p "$TEST_SRC_DIR"
java --enable-native-access=ALL-UNNAMED -cp "$CLASSES_DIR" -Djava.library.path="$(realpath "$TARGET_NATIVE_DIR")" \
    "$PKG.GaramonParser" \
    -d "$TEST_SRC_DIR" \
    $TEST_TEMPLATE_FILES


echo "Building final package"
(cd $ALGEBRA_DIR && ./gradlew build)

if [ "$PUBLISH" = true ]; then
    echo "Publishing to Maven local"
    (cd $ALGEBRA_DIR && ./gradlew publishToMavenLocal)
else
    echo "Not publishing because --publish not used."
fi

echo "Done."
echo "Listing generated packages:"
(cd $ALGEBRA_DIR && ./gradlew build -x test --console=plain | grep "BUILD SUCCESSFUL" -A 10 | grep "jar")

